# .github/workflows/release.yml

name: Create Release, Build and Deploy

on:
  push:
    tags:
      - 'v*.*.*'

env:
  # Ayarları merkezi bir yerden yönetelim
  GCP_FIREWALL_RULE_PREFIX: 'allow-ssh-github-actions' # Kuralların ön eki
  GCP_NETWORK_TAG: 'sip-server'

jobs:
  # --- Build ve Docker adımları aynı kalıyor ---
  create_release:
    # ... (İÇERİK DEĞİŞMEDİ) ...
  build_binaries:
    # ... (İÇERİK DEĞİŞMEDİ) ...
  build_and_publish_docker:
    # ... (İÇERİK DEĞİŞMEDİ) ...

  # --- Dağıtım Adımı API Hatalarına Karşı Güçlendirildi ---
  deploy_to_server:
    name: Deploy to SIP Server
    needs: build_binaries
    runs-on: ubuntu-latest
    
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: 'Get and Chunk GitHub Actions IPs'
        id: get_ips
        shell: bash
        run: |
          sudo apt-get update && sudo apt-get install -y jq
          
          # DÜZELTİLDİ: API'den geçerli yanıt alana kadar 5 kez dene
          for i in {1..5}; do
            API_RESPONSE=$(curl -s https://api.github.com/meta)
            if echo "$API_RESPONSE" | jq -e '.actions' > /dev/null; then
              echo "Successfully fetched GitHub meta API on attempt $i."
              echo "$API_RESPONSE" | jq -r '.actions[]' > all_ips.txt
              break
            else
              echo "Attempt $i: Failed to fetch valid JSON from GitHub meta API. Retrying in 10 seconds..."
              sleep 10
            fi
          done
          
          if [ ! -f all_ips.txt ]; then
            echo "::error::Could not fetch GitHub Actions IP list after 5 attempts."
            exit 1
          fi

          split -l 256 all_ips.txt ip_chunk_
          echo "chunk_count=$(ls ip_chunk_* | wc -l)" >> "$GITHUB_OUTPUT"

      - name: 'Create or Update GCP Firewall Rules'
        run: |
          CHUNK_COUNT=${{ steps.get_ips.outputs.chunk_count }}
          for i in $(seq 0 $(($CHUNK_COUNT - 1))); do
            # Dosya adlandırma mantığı `split` komutunun çıktısına uygun hale getirildi (örn: ip_chunk_aa, ip_chunk_ab)
            CHUNK_FILE_SUFFIX=$(printf "%02d" $i | awk '{for(i=1;i<=length;i++){c=substr($0,i,1);printf "%s",substr("abcdefghijklmnopqrstuvwxyz",c+1,1)}}')
            CHUNK_FILE="ip_chunk_$CHUNK_FILE_SUFFIX"
            RULE_NAME="${{ env.GCP_FIREWALL_RULE_PREFIX }}-${i}"
            SOURCE_RANGES=$(paste -sd, $CHUNK_FILE)
            
            echo "Processing rule: $RULE_NAME with $(wc -l < $CHUNK_FILE) IPs..."
            
            if gcloud compute firewall-rules describe $RULE_NAME --project=${{ secrets.GCP_PROJECT_ID }} &> /dev/null; then
              echo "Firewall rule $RULE_NAME found. Updating..."
              gcloud compute firewall-rules update $RULE_NAME \
                --project=${{ secrets.GCP_PROJECT_ID }} \
                --source-ranges="$SOURCE_RANGES"
            else
              echo "Firewall rule $RULE_NAME not found. Creating..."
              gcloud compute firewall-rules create $RULE_NAME \
                --project=${{ secrets.GCP_PROJECT_ID }} \
                --network=default \
                --action=ALLOW \
                --direction=INGRESS \
                --rules=tcp:22 \
                --target-tags=${{ env.GCP_NETWORK_TAG }} \
                --source-ranges="$SOURCE_RANGES"
            fi
          done
          
          EXISTING_RULES=$(gcloud compute firewall-rules list --project=${{ secrets.GCP_PROJECT_ID }} --filter="name~'^${{ env.GCP_FIREWALL_RULE_PREFIX }}-'" --format="value(name)")
          for RULE in $EXISTING_RULES; do
            INDEX=$(echo $RULE | sed 's/.*-//')
            if [ $INDEX -ge $CHUNK_COUNT ]; then
              echo "Deleting obsolete firewall rule: $RULE"
              gcloud compute firewall-rules delete $RULE --project=${{ secrets.GCP_PROJECT_ID }} --quiet
            fi
          done

      - name: 'Deploy binary via SSH'
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            mkdir -p ~/app/sentiric-sip
            cd ~/app/sentiric-sip
            pkill -f sentiric-sip-core-service || true
            wget -q https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/sentiric-sip-core-service-linux-x86_64.tar.gz -O release.tar.gz
            tar -xzvf release.tar.gz
            chmod +x sentiric-sip-core-service
            export SERVER_IP=${{ secrets.SSH_HOST }}
            nohup ./sentiric-sip-core-service > service.log 2>&1 &