# .github/workflows/release.yml

name: Create Release, Build and Deploy

on:
  push:
    tags:
      - 'v*.*.*'

env:
  # Ayarları merkezi bir yerden yönetelim
  GCP_FIREWALL_RULE_NAME: 'allow-ssh-from-github-actions'
  GCP_NETWORK_TAG: 'sip-server'

jobs:
  # --- Build ve Docker adımları aynı kalıyor ---
  create_release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            Automated release for ${{ github.ref }}.
            Assets include native binaries for Linux and Windows, and a Docker image.
          draft: false
          prerelease: false

  build_binaries:
    # ... (İÇERİK DEĞİŞMEDİ) ...
    name: Build Native Binaries
    needs: create_release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: sentiric-sip-core-service-linux-x86_64
            asset_name: sentiric-sip-core-service-linux-x86_64.tar.gz
            archive_command: tar czf
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: sentiric-sip-core-service-windows-x86_64.exe
            asset_name: sentiric-sip-core-service-windows-x86_64.zip
            archive_command: 7z a
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true
      - name: Install build dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install -y build-essential git
      - name: Clone bcg729 dependency
        run: git clone https://github.com/BelledonneCommunications/bcg729.git
      - name: Build binary
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}
      - name: Prepare assets for release
        shell: bash
        run: |
          ARTIFACT_DIR=./release-assets
          BINARY_NAME=sentiric-sip-core-service
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            BINARY_NAME=${BINARY_NAME}.exe
          fi
          mkdir -p $ARTIFACT_DIR
          cp target/${{ matrix.target }}/release/${BINARY_NAME} $ARTIFACT_DIR/
          cp welcome.wav $ARTIFACT_DIR/
          cd $ARTIFACT_DIR
          ${{ matrix.archive_command }} ../${{ matrix.asset_name }} ./*
          cd ..
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./${{ matrix.asset_name }}
          asset_name: ${{ matrix.asset_name }}
          asset_content_type: application/octet-stream

  build_and_publish_docker:
    # ... (İÇERİK DEĞİŞMEDİ) ...
    name: Build and Publish Docker Image
    needs: create_release
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  # --- Dağıtım Adımı Tamamen Yenilendi ---
  deploy_to_server:
    name: Deploy to SIP Server
    needs: build_binaries
    runs-on: ubuntu-latest
    
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: 'Get latest GitHub Actions IPs'
        id: get_ips
        run: |
          # JQ'nun kurulu olduğundan emin ol
          sudo apt-get install -y jq
          GITHUB_IPS=$(curl -s https://api.github.com/meta | jq -r '.actions | join(",")')
          echo "ips=$GITHUB_IPS" >> "$GITHUB_OUTPUT"
      
      - name: 'Update GCP Firewall Rule'
        run: |
          # Kuralın zaten var olup olmadığını kontrol et
          if gcloud compute firewall-rules describe ${{ env.GCP_FIREWALL_RULE_NAME }} --project=${{ secrets.GCP_PROJECT_ID }} &> /dev/null; then
            echo "Firewall rule found. Updating..."
            gcloud compute firewall-rules update ${{ env.GCP_FIREWALL_RULE_NAME }} \
              --project=${{ secrets.GCP_PROJECT_ID }} \
              --source-ranges='${{ steps.get_ips.outputs.ips }}'
          else
            echo "Firewall rule not found. Creating..."
            gcloud compute firewall-rules create ${{ env.GCP_FIREWALL_RULE_NAME }} \
              --project=${{ secrets.GCP_PROJECT_ID }} \
              --network=default \
              --action=ALLOW \
              --direction=INGRESS \
              --rules=tcp:22 \
              --target-tags=${{ env.GCP_NETWORK_TAG }} \
              --source-ranges='${{ steps.get_ips.outputs.ips }}'
          fi

      - name: 'Deploy binary via SSH'
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            mkdir -p ~/app/sentiric-sip
            cd ~/app/sentiric-sip
            pkill -f sentiric-sip-core-service || true
            wget -q https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/sentiric-sip-core-service-linux-x86_64.tar.gz -O release.tar.gz
            tar -xzvf release.tar.gz
            chmod +x sentiric-sip-core-service
            export SERVER_IP=${{ secrets.SSH_HOST }}
            nohup ./sentiric-sip-core-service > service.log 2>&1 &